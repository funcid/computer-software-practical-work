'use client';
import { useState } from 'react';
import Link from 'next/link';

interface Topic {
  id: number;
  title: string;
  description: string;
  path: string;
  icon: string;
  difficulty: 'easy' | 'medium' | 'hard';
  estimatedTime: string;
  keyPoints: string[];
}

export default function TheoryPage() {
  const [hoveredTopic, setHoveredTopic] = useState<number | null>(null);

  const topics: Topic[] = [
    {
      id: 1,
      title: "–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞",
      description: "–ü—Ä–∏–Ω—Ü–∏–ø—ã —Ñ–æ–Ω –ù–µ–π–º–∞–Ω–∞, —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞, –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤",
      path: "/theory/architecture",
      icon: "üñ•Ô∏è",
      difficulty: "medium",
      estimatedTime: "45 –º–∏–Ω—É—Ç",
      keyPoints: [
        "–ë–∞–∑–æ–≤—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã —Ä–∞–±–æ—Ç—ã –∫–æ–º–ø—å—é—Ç–µ—Ä–∞",
        "–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏ –∏—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ",
        "–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Ñ–æ–Ω –ù–µ–π–º–∞–Ω–∞"
      ]
    },
    {
      id: 2,
      title: "–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä (CPU)",
      description: "–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏, –ø—Ä–∏–Ω—Ü–∏–ø—ã —Ä–∞–±–æ—Ç—ã, –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞",
      path: "/theory/cpu",
      icon: "‚ö°",
      difficulty: "hard",
      estimatedTime: "60 –º–∏–Ω—É—Ç",
      keyPoints: [
        "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤",
        "–ü—Ä–∏–Ω—Ü–∏–ø—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö",
        "–ú–Ω–æ–≥–æ—è–¥–µ—Ä–Ω–æ—Å—Ç—å –∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è"
      ]
    },
    {
      id: 3,
      title: "–ü–∞–º—è—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä–∞",
      description: "–í–∏–¥—ã –ø–∞–º—è—Ç–∏, –ø—Ä–∏–Ω—Ü–∏–ø—ã —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö, –∏–µ—Ä–∞—Ä—Ö–∏—è –ø–∞–º—è—Ç–∏",
      path: "/theory/memory",
      icon: "üíæ",
      difficulty: "medium",
      estimatedTime: "40 –º–∏–Ω—É—Ç",
      keyPoints: [
        "–¢–∏–ø—ã –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–π –ø–∞–º—è—Ç–∏",
        "–ü—Ä–∏–Ω—Ü–∏–ø—ã —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏",
        "–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–∏–¥–æ–≤ –ø–∞–º—è—Ç–∏"
      ]
    },
    {
      id: 4,
      title: "–ü—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ",
      description: "–°–∏—Å—Ç–µ–º–Ω–æ–µ –∏ –ø—Ä–∏–∫–ª–∞–¥–Ω–æ–µ –ü–û, –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã",
      path: "/theory/software",
      icon: "üì±",
      difficulty: "easy",
      estimatedTime: "30 –º–∏–Ω—É—Ç",
      keyPoints: [
        "–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è",
        "–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã",
        "–ü—Ä–∏–∫–ª–∞–¥–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã"
      ]
    },
    {
      id: 5,
      title: "–ö–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–µ —Å–µ—Ç–∏",
      description: "–í–∏–¥—ã —Å–µ—Ç–µ–π, —Å–µ—Ç–µ–≤–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ, –ø—Ä–∏–Ω—Ü–∏–ø—ã —Ä–∞–±–æ—Ç—ã",
      path: "/theory/networks",
      icon: "üåê",
      difficulty: "hard",
      estimatedTime: "50 –º–∏–Ω—É—Ç",
      keyPoints: [
        "–¢–æ–ø–æ–ª–æ–≥–∏–∏ —Å–µ—Ç–µ–π",
        "–°–µ—Ç–µ–≤—ã–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã",
        "–ü—Ä–∏–Ω—Ü–∏–ø—ã –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö"
      ]
    }
  ];

  const getDifficultyColor = (difficulty: string) => {
    switch (difficulty) {
      case 'easy': return 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300';
      case 'medium': return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300';
      case 'hard': return 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300';
      default: return '';
    }
  };

  const getDifficultyText = (difficulty: string) => {
    switch (difficulty) {
      case 'easy': return '–õ–µ–≥–∫–∏–π —É—Ä–æ–≤–µ–Ω—å';
      case 'medium': return '–°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å';
      case 'hard': return '–°–ª–æ–∂–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å';
      default: return '';
    }
  };

  return (
    <div className="min-h-screen p-8">
      <div className="max-w-4xl mx-auto">
        <div className="flex justify-between items-center mb-12">
          <h1 className="text-4xl font-bold">–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª</h1>
          <Link 
            href="/"
            className="text-blue-600 hover:text-blue-800 dark:text-blue-400 flex items-center gap-2"
          >
            <span>‚Üê</span> –ù–∞ –≥–ª–∞–≤–Ω—É—é
          </Link>
        </div>
        
        <div className="grid gap-6">
          {topics.map((topic) => (
            <div 
              key={topic.id}
              className="relative"
              onMouseEnter={() => setHoveredTopic(topic.id)}
              onMouseLeave={() => setHoveredTopic(null)}
            >
              <Link 
                href={topic.path}
                className="block"
              >
                <div className="p-6 border rounded-lg hover:shadow-lg transition-all duration-300 transform hover:-translate-y-1 bg-white dark:bg-gray-800">
                  <div className="flex items-start justify-between mb-4">
                    <div className="flex items-center gap-3">
                      <span className="text-4xl">{topic.icon}</span>
                      <div>
                        <h2 className="text-2xl font-bold mb-2">{topic.title}</h2>
                        <p className="text-gray-600 dark:text-gray-300">
                          {topic.description}
                        </p>
                      </div>
                    </div>
                    <div className="flex flex-col items-end gap-2">
                      <span className={`px-3 py-1 rounded-full text-sm font-medium ${getDifficultyColor(topic.difficulty)}`}>
                        {getDifficultyText(topic.difficulty)}
                      </span>
                      <span className="text-sm text-gray-500 dark:text-gray-400">
                        ‚è±Ô∏è {topic.estimatedTime}
                      </span>
                    </div>
                  </div>

                  {hoveredTopic === topic.id && (
                    <div className="mt-4 p-4 bg-gray-50 dark:bg-gray-700 rounded-lg">
                      <h3 className="font-semibold mb-2">–ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã:</h3>
                      <ul className="list-disc pl-5 space-y-1">
                        {topic.keyPoints.map((point, index) => (
                          <li key={index} className="text-gray-600 dark:text-gray-300">
                            {point}
                          </li>
                        ))}
                      </ul>
                    </div>
                  )}
                </div>
              </Link>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
} 